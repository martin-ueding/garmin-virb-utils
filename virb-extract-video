#!/usr/bin/env python3

import collections
import datetime
import json
import pathlib
import subprocess
from typing import *

import click


@click.command()
@click.option("--base-dir", default="/run/media/mu/NO_NAME/DCIM", show_default=True)
@click.option("--output-dir", default="~/TODO/", show_default=True)
def main(base_dir: str, output_dir: str) -> None:
    """
    Extract video snippets from Virb camera
    """
    basepath = pathlib.Path(base_dir)
    videos_and_images = get_videos_and_images(basepath)
    print(videos_and_images)
    for video, images in sorted(videos_and_images.items()):
        ranges = get_ranges(video, images)
        print(ranges)
        for range in ranges:
            cut_video(video, range, pathlib.Path(output_dir).expanduser())


def cut_video(video, range, output_dir: pathlib.Path) -> None:
    image_mtime, start, duration = range
    output_path = output_dir / f"Fahrradkamera {image_mtime.isoformat()}.mp4"
    command = [
        "ffmpeg",
        "-ss",
        start,
        "-t",
        duration,
        "-i",
        str(video),
        "-acodec",
        "copy",
        "-vcodec",
        "copy",
        "-async",
        "1",
        str(output_path),
    ]
    print(command)
    if not output_path.is_file():
        subprocess.run(command, check=True)


def get_videos_and_images(path: pathlib.Path) -> Dict[pathlib.Path, List[pathlib.Path]]:
    videos_and_pictures = collections.defaultdict(list)
    for directory in sorted(path.iterdir()):
        video = None
        for file in sorted(directory.iterdir()):
            s = file.stat()
            mtime = datetime.datetime.fromtimestamp(s.st_mtime)
            if file.suffix == ".MP4":
                video = file
            if file.name.endswith("JPG"):
                videos_and_pictures[video].append(file)
    return dict(videos_and_pictures)


def get_ranges(video: pathlib.Path, images: List[pathlib.Path]):
    video_end = get_mtime(video)
    video_duration = get_video_duration(video)
    video_start = video_end - video_duration
    images_mtime = [get_mtime(image) for image in images]
    print(video)
    print(video_start, video_end)
    print(images_mtime)
    ranges = []
    for image_mtime in images_mtime:
        range_start = image_mtime - datetime.timedelta(seconds=30)
        if range_start < video_start:
            range_start = video_start
        range_end = image_mtime

        time_start = str(range_start - video_start)
        time_duration = str(range_end - range_start)
        ranges.append((range_end, time_start, time_duration))
    return ranges


def get_mtime(path: pathlib.Path) -> datetime.datetime:
    return datetime.datetime.fromtimestamp(path.stat().st_mtime)


def get_video_duration(path: pathlib.Path) -> datetime.timedelta:
    command = ["ffprobe", "-print_format", "json", "-show_streams", str(path)]
    output = subprocess.run(command, check=True, capture_output=True)
    data = json.loads(output.stdout.decode())
    seconds = float(data["streams"][0]["duration"])
    return datetime.timedelta(seconds=seconds)


if __name__ == "__main__":
    main()
